#pragma alloc_text 这个宏仅仅用来指定某个函数的可执行代码在编译出来后在 sys 文件中的位置.
内核模块编译出来之后是一个 PE 格式的 sys 文件,这个文件的代码段 (text 段)中有不同的节(Section) ,
不同的节被加载到内存中之后处理情况不同.
读者 需要关心的主要是 3 种节:
INIT 节的特点是在初始化完毕之后就被释放.也就是说, 就不再占用内存空间了. 
PAGE 节的特点是位于可以进行分页交换的内存空间,这些空间 在内存紧张时可以被交换到硬盘上以节省内存.
PAGELK 节如果未用上述的预编译指令处理,则代码默认位于 PAGELK 节,加载后位于不可分页交换的内存空间中. 
函数 DriverEntry 显然只需要在初始化阶段执行一次,
因此这个函数一般都用 #pragma alloc_text(INIT, DriverEntry)使之位于初始化后立刻释放的空间内.
为了节约内 存,可以把很多函数放在 PAGE 节中.但是要注意:放在 PAGE 节中的函数不可以在 Dispatch 级调用,
因为这种函数的调用可能诱发缺页中断.但是缺页中断处理不能在 Dispatch 级完成.为此,一般都用一个宏 PAGED_CODE()进行测试.
如果发现当前中断 级为 Dispatch 级,则程序直接报异常,让程序员及早发现