挂钩某个IRP处理函数:
 a,调用IoGetDeviceObjectPointer返回的设备对象(PDEVICE_OBJECT)
 b,由设备对象得到驱动对象PDEVICE_OBJECT->DriverObject(PDRIVER_OBJECT),这里是否应该调用ObReferenceObjectByPointer函数增加驱动对象的引用计数,以防止该驱动程序在我们的驱动程序前被卸载呢?(问题2)
 c,再由驱动对象得到中断请求派遣函数表(PDRIVER_OBJECT->MajorFunction)
 d,保存PDRIVER_OBJECT->MajorFunction[IRP_MJ_XXXXXXX]值(原中断请求派遣函数地址)
 e,修改PDRIVER_OBJECT->MajorFunction[IRP_MJ_XXXXXXX]值(让它指向我们自定义的函数),使用锁总线前缀lock的xchg指令进行赋值操作(让代码多线程和多处理器安全)
 f,结束处理同System Service Hook

过滤某个设备的IRP请求:
 a,初使化IRP请求派遣函数表MajorFunction,将它们全都指向一个派遣函数DispatchAny
 b,再为MajorFunction指定几个我们感兴趣的IRP请求派遣函数
 c,得到设备对象指针:IoGetDeviceObjectPointer
 d,将设备加到设备堆栈上:IoAttachDeviceToDeviceStack,并保存下层设备对象,以供IoCallDriver时使用.
 e,在DispatchAny中将所有IRP传给下层驱动:IoSkipCurrentIrpStackLocation,IoCallDriver
 f,在指定的几个请求派遣函数中对IRP进行处理,如果有必要,可以将IRP传给下层驱动.


NTSTATUS 
IoCallDriver(
IN PDEVICE_OBJECT  DeviceObject,
IN OUT PIRP  Irp
);


设备绑定的内核API::

NTSTATUS 
IoAttachDevice( 
IN PDEVICE_OBJECT SourceDevice, 调用者生成的用来过滤的虚拟设备
IN PUNICODE_STRING TargetDevice, 要被绑定的目标设备
OUT PDEVICE_OBJECT *AttachedDevice 用来返回的指针的指针。绑定成功后，被绑定的设备指针被返回到这个地址
);

如果一个设备被其他设备绑定，它们在一起的一组设备，被称为设备栈（之所以称为栈，是由于和请求的传递方式有关）。实际上，
IoAttachDevice总是会绑定设备栈上最顶层的那个设备。
ttachedDevice是一个用来返回的指针的指针。绑定成功后，被绑定的设备指针被返回到这个地址

并不是所有的设备都有设备名字，所以依靠IoAttachDevice无法绑定没有名字的设备
另外还有两个API：一个是 IoAttachDeviceToDeviceStack，另一个是IoAttachDeviceToDeviceStackSafe。
这两个函数功能一 样，都是根据设备对象的指针（而不是名字）进行绑定；
区别是IoAttachDeviceToDeviceStackSafe更加安全，而且只有在 Windows 2000SP4和Windows XP以上的系统中才有。
一般使用IoAttachDeviceToDeviceStackSafe，但当试图兼容较低版本的Windows 2000时，
应该使用IoAttachDeviceToDeviceStack。  

PDEVICE_OBJECT 
IoAttachDeviceToDeviceStack(
IN PDEVICE_OBJECT  SourceDevice,
IN PDEVICE_OBJECT  TargetDevice
);

NTSTATUS 
IoAttachDeviceToDeviceStackSafe( 
IN PDEVICE_OBJECT SourceDevice, // 过滤设备 
IN PDEVICE_OBJECT TargetDevice, // 要被绑定的设备栈中的设备 
IN OUT PDEVICE_OBJECT *AttachedToDeviceObject// 返回最终被绑定的设备 
);
与IoAttachDeviceToDeviceStack是类似，
AttachedToDeviceObjec变成了IoAttachDeviceToDeviceStack返回值


获得设备对象的指针::
NTSTATUS  
IoGetDeviceObjectPointer(  
IN PUNICODE_STRING  ObjectName,  
IN ACCESS_MASK  DesiredAccess,  
OUT PFILE_OBJECT  *FileObject,  
OUT PDEVICE_OBJECT  *DeviceObject  
);  
ObjectName是设备名字。DesiredAccess是期望访问的权限。直接填写 FILE_ALL_ACCESS即可。
FileObject是一个返回参数，即获得这个设备对象的同时会得到的一个文件对象（File Object）。
就打开串口设备这件事而言，这个文件对象并没有什么用处。但是必须注意：
在使用这个函数之后必须把这个文件对象“解除引用”，否则会引起 内存泄漏


IoSkipCurrentIrpStackLocation   IoCallDriver
当驱动被分层以后，他们被注册到一个chain中，IRP会在这个chain中传递，从最上面，到最下面，再回到最上面
为适应这种体制，IRP的结构的大小是不固定的，大体结构如下： 
-------------------- 
| IRP header | 
-------------------- 
|IO_STACK_LOCATION |<-----lowest driver stack location #index1 
-------------------- 
|IO_STACK_LOCATION |<-----next higher stack location #index2 
-------------------- 
|IO_STACK_LOCATION |<-----topmost driver stack location #index3 
-------------------- 
也就是说，chain的最顶层的驱动，对应的IO_STACK_LOCATION是在最下面 
IRP头中存放着当前驱动对应的IO_STACK_LOCATION的索引，是从1开始的，不是从0开始 
同时，也保存着当前驱动对应的IO_STACK_LOCATION的地址 
最上面的驱动处理完这个IRP后，调用IoCallDriver,这会使索引减1，地址也修正为下一个IO_STACK_LOCATION的地址， 
然后IRP被交给下一个Driver处理， 
而IoSkipCurrentIrpStackLocation宏的作用就是使IO_STACK_LOCATION指针少前进一步 

#define IoSkipCurrentIrpStackLocation( Irp ) { \ 
    
(Irp)->CurrentLocation++; \ 
    
(Irp)->Tail.Overlay.CurrentStackLocation++; 
}


而IoCallDriver函数会使IO_STACK_LOCATION指针向前一步，中和的结果就是IO_STACK_LOCATION指针不变 
当下一个驱动程序的派遣例程调用IoGetCurrentIrpStackLocation时，它将收到与我们正使 
用的完全相同的IO_STACK_LOCATION指针，因此，它所处理的将是同一个请求(相同的主副功 
能代码)以及相同的参数。


#define IoSetNextIrpStackLocation( Irp ) { \ 
    
(Irp)->CurrentLocation++; \ 
    
(Irp)->Tail.Overlay.CurrentStackLocation―; 
}



NTSTATUS   
IoCallDriver(  
    IN PDEVICE_OBJECT  DeviceObject,  
    IN OUT PIRP  Irp  
    );  
NTSTATUS  
  PoCallDriver(  
    IN PDEVICE_OBJECT  DeviceObject,  
    IN OUT PIRP  Irp  
    );  
除了函数名不同之外，其他都一样。参数都是两个，一个是设备对象的指针，另一个是IRP请求对象的指针。返回值也是一样
IoCallDriver这个函数向DeviceObject设备对象的驱动对象发送一个IRP请求；
PoCallDriver函数向设备栈中的下层设备传递一个主功能号为IRP_MJ_POWER的请求，且限于特定的OS。
而且，调用IoCallDriver之前，主调驱动程序必须要为目标驱动程序建立IRP里的I/O stack location；
同时，调用时，IoCallDriver函数还会帮助驱动程序将输入参数的DeviceObject值赋给IO_STACK_LOCATION结构里的DeviceObject成员。