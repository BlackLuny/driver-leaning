I/O端口
端口（port）是接口电路中能被CPU直接访问的寄存器的地址。几乎每一种外设都是通过读写设备上的寄存器来进行的。CPU通过这些地址即端口向接口电路中的寄存器发送命令，读取状态和传送数据。外设寄存器也称为“I/O端口”，通常包括：控制寄存器、状态寄存器和数据寄存器三大类，而且一个外设的寄存器通常被连续地编址。

I/O内存
例如，在PC上可以插上一块图形卡，有2MB的存储空间，甚至可能还带有ROM,其中装有可执行代码。

IO端口和IO内存的区分及联系
这两者如何区分就涉及到硬件知识，X86体系中，具有两个地址空间：IO空间和内存空间，而RISC指令系统的CPU（如ARM、PowerPC等）通常只实现一个物理地址空间，即内存空间。
内存空间：内存地址寻址范围，32位操作系统内存空间为2的32次幂，即4G。
IO空间：X86特有的一个空间，与内存空间彼此独立的地址空间，32位X86有64K的IO空间。
IO端口：当寄存器或内存位于IO空间时，称为IO端口。一般寄存器也俗称I/O端口,或者说I/O ports,这个I/O端口可以被映射在Memory Space,也可以被映射在I/O Space。
IO内存：当寄存器或内存位于内存空间时，称为IO内存。

CPU对外设IO端口物理地址的编址方式
一种是I/O映射方式（I/O－mapped），
一种是内存映射方式（Memory－mapped）。而具体采用哪一种则取决于CPU的体系结构。 精简指令集的cpu通常只实现一个物理地址空间（RAM）。
在这种情况下，外设I/O端口的物理地址就被映射到CPU的单一物理地址空间中，而成为内存的一部分。此时，CPU可以象访问一个内存单元那样访问外设I/O端口，而不需要设立专门的外设I/O指令。

独立编址主要优点是：
1）、I/O端口地址不占用存储器空间；使用专门的I／O指令对端口进行操作，I/O指令短，执行速度快。
2）、并且由于专门I/O指令与存储器访问指令有明显的区别，使程序中I/O操作和存储器操作层次清晰，程序的可读性强。
3）、同时，由于使用专门的I/O指令访问端口，并且I/O端口地址和存储器地址是分开的，故I/O端口地址和存储器地址可以重叠，而不会相互混淆。 
4）、译码电路比较简单(因为I/0端口的地址空间一般较小，所用地址线也就较少)。
其缺点是：只能用专门的I/0指令，访问端口的方法不如访问存储器的方法多。
统一编址优点：
1）、由于对I/O设备的访问是使用访问存储器的指令，所以指令类型多，功能齐全，这不仅使访问I/O端口可实现输入/输出操作，而且还可对端口内容进行算术逻辑运算，移位等等；
2）、另外，能给端口有较大的编址空间，这对大型控制系统和数据通信系统是很有意义的。
这种方式的缺点是端口占用了存储器的地址空间，使存储器容量减小，另外指令长度比专门I/O指令要长，因而执行速度较慢。

Linux下访问IO内存
IO内存的访问方法是：首先调用request_mem_region()申请资源，接着将寄存器地址通过ioremap()映射到内核空间的虚拟地址，
之后就可以Linux设备访问编程接口访问这些寄存器了，访问完成后，使用ioremap()对申请的虚拟地址进行释放，并释放release_mem_region()申请的IO内存资源。

外设IO寄存器地址独立编址的CPU，这时应该称外设IO寄存器为IO端口，访问IO寄存器可通过ioport_map将其映射到虚拟地址空间，但实际上这是给开发人员制造的一个“假象”，并没有映射到内核虚拟地址，仅仅是为了可以使用和IO内存一样的接口访问IO寄存器；也可以直接使用in/out指令访问IO寄存器。
例如：Intel x86平台普通使用了名为内存映射（MMIO）的技术，该技术是PCI规范的一部分，IO设备端口被映射到内存空间，映射后，CPU访问IO端口就如同访 问内存一样。
外设IO寄存器地址统一编址的CPU，这时应该称外设IO寄存器为IO内存，访问IO寄存器可通过ioremap将其映射到虚拟地址空间，然后再使用read/write接口访问。