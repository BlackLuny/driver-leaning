1 多处理器系统中每个cpu上都对应有一个gdt 原因是2

每个gdt包含18个段描述符和14个空的，未使用的，或保留的项。
每一个gdt中包含的18个段描述符指向下列段：
1.用户态和内核态的代码段和数据段 共4个
2.任务状态段tss，每个处理器有1个
3.1个包含缺省局部描述符表的段，这个段通常是被所有进程锁共享的
4.3个局部线程存储段，这种机制允许多线程应用程序使用最多3个局部于线程的数据段。系统调用set_thread_area()和get_thread_area()
分别为正在执行的进程创建和撤销已个tls段
4.与高级电源管理amp相关的3个段，由于bios代码使用段，所以当linux apm驱动程序调用bios函数来获取或者设置apm设备的状态时，就可以使用自定义的代码段和数据段
5.与支持即插pnp即用功能的bios服务程序相关的5个段：在前一种情况下，就像前述与amp相关的3个段一样，由于bios历程使用段，所以当linux的pnp设备驱动程序调用bios
函数来检测pnp设备使用的资源时，就可以使用自定义的代码段和数据段
6.被内核用来处理双重错误异常的特殊tss段

2 每个cpu都有自己一套寄存器组

3 cpu和内存是通过总线关联，总线是所有cpu所共享的

4 多核处理器有一个主核（也叫引导核），其余是从核。

四核处理器的完整启动过程如下：
1.处理器刚加电或复位，主核0立即启动（三个从核尚未启动），此时主核0的EIP指向ROM，主核0从ROM中读取BIOS指令，通过BIOS指令把磁盘中的操作系统引导程序载入ROM出口处的RAM。
2.主核0执行玩ROM中的BIOS指令进入RAM，执行RAM中的操作系统引导程序，跳至相应的地址，然后执行那个地址上的指令来改变这条跳转指令的跳转地址供从核1使用。
3.从核1延时启动，虽然此时从核1的EIP指向ROM，但ROM对从核不可读，所以执行空指令，除了EIP不停加1外什么事都不干。
4.从核1执行玩指向ROM的空指令进入RAM，执行RAM中的操作系统引导程序，执行已经被主核0改变了的跳转指令，跳入一个与主核0不同的地址，然后执行那个地址上的指令再次改变这条跳转指令的跳转地址供从核2使用。
5.从核2延时启动，虽然此时从核2的EIP指向ROM，但ROM对从核不可读，所以执行空指令，除了EIP不停加1外什么事都不干。
6.从核2执行玩指向ROM的空指令进入RAM，执行RAM中的操作系统引导程序，执行已经被从核1改变了的跳转指令，跳入一个与从核1不同的地址，然后执行那个地址上的指令再次改变这条跳转指令的跳转地址供从核3使用。
7.从核3延时启动，虽然此时从核3的EIP指向ROM，但ROM对从核不可读，所以执行空指令，除了EIP不停加1外什么事都不干。
8.从核3执行玩指向ROM的空指令进入RAM，执行RAM中的操作系统引导程序，执行已经被从核2改变了的跳转指令，跳入一个与从核2不同的地址。
至此，四个核已经分别指向不同的地址，可以同时执行不同的指令了。


5 时钟中断应该每个cpu都会处理，因为每个cpu可能会进行基于时间片的进程调度

TLB在X86体系的CPU里的实际应用最早是从Intel的486CPU开始的，在X86体系的CPU里边，一般都设有如下4组TLB:
第一组：缓存一般页表（4K字节页面）的指令页表缓存（Instruction-TLB）；
第二组：缓存一般页表（4K字节页面）的数据页表缓存（Data-TLB）；
第三组：缓存大尺寸页表（2M/4M字节页面）的指令页表缓存（Instruction-TLB）；
第四组：缓存大尺寸页表（2M/4M字节页面）的数据页表缓存（Data-TLB）；

多处理器系统的每一个处理器都有一个硬件高速缓存，因此他们需要额外的硬件电路用于保持高速缓存内容的同步。

TLB和CPU里的一级、二级缓存之间不存在本质的区别，只不过前者缓存页表数据，而后两个缓存实际数据。

一般来说，任何进程切换都会暗示更换活动页表集。相对于过期页表，本地tlb表项必须被刷新，这个过程在内核吧新的页全局的地址写入cr3控制寄存器时
会自动完成。但在下列情况下避免tlb刷新
1 当两个进程使用相同的页表集的普通进程之间执行进程切换时
2 当在一个普通进程和一个内核进程间执行进程切换时。内核并不拥有自己的页表集，他们使用刚在cpu上执行过的普通进程的页表集。

