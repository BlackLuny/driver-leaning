#ifdef CONFIG_SMP   
#define smp_mb()    mb()   
#define smp_rmb()   rmb()   
#define smp_wmb()   wmb()   
#else   
#define smp_mb()    barrier()   
#define smp_rmb()   barrier()   
#define smp_wmb()   barrier()   
#endif  
CONFIG_SMP就是用来支持多处理器的。如果是x86 UP体系架构，smp_mb、smp_rmb、smp_wmb被翻译成barrier：

#define barrier() __asm__ __volatile__("": : :"memory")  
barrier()的作用，就是告诉编译器，内存的变量值都改变了，之前存在寄存器里的变量副本无效，要访问变量还需再访问内存。这样做足以满足UP中所有的内存屏障。
#ifdef CONFIG_X86_32   
/* 
 * Some non-Intel clones support out of order store. wmb() ceases to be a 
 * nop for these. 
 */  
#define mb() alternative("lock; addl $0,0(%%esp)", "mfence", X86_FEATURE_XMM2)   
#define rmb() alternative("lock; addl $0,0(%%esp)", "lfence", X86_FEATURE_XMM2)   
#define wmb() alternative("lock; addl $0,0(%%esp)", "sfence", X86_FEATURE_XMM)   
#else   
#define mb()    asm volatile("mfence":::"memory")   
#define rmb()   asm volatile("lfence":::"memory")   
#define wmb()   asm volatile("sfence" ::: "memory")   
#endif  
如果是SMP系统，内存屏障就会翻译成对应的mb()、rmb()和wmb()。这里CONFIG_X86_32的意思是说这是一个32位x86系统，否则就是64位的x86系统。现在的linux内核将32位x86和64位x86融合在同一个x86目录，所以需要增加这个配置选项。
可以看到，如果是64位x86，肯定有mfence、lfence和sfence三条指令，而32位的x86系统则不一定，所以需要进一步查看cpu是否支持这三条新的指令，不行则用加锁的方式来增加内存屏障。

SFENCE,LFENCE,MFENCE指令提供了高效的方式来保证读写内存的排序,这种操作发生在产生弱排序数据的程序和读取这个数据的程序之间。 
SFENCE――串行化发生在SFENCE指令之前的写操作但是不影响读操作。 
LFENCE――串行化发生在SFENCE指令之前的读操作但是不影响写操作。 
MFENCE――串行化发生在MFENCE指令之前的读写操作。 
sfence:在sfence指令前的写操作当必须在sfence指令后的写操作前完成。 
lfence：在lfence指令前的读操作当必须在lfence指令后的读操作前完成。 
mfence：在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。 

至于带lock的内存操作，会在锁内存总线之前，就把之前的读写操作结束，功能相当于mfence，当然执行效率上要差一些。

rmb()提供了一个读内存屏障，它确保跨越rmb()的载入动作不会发生重排序。也就是说，在rmb()之前的载入操作不会被重新排在该调用之后，同理，在rmb()之后的载入操作不会被重新排在调用之前。
wmb()提供了一个写内存屏障，其和rmb()函数相似，区别只是它是针对存储而非载入，它确保跨越屏障的存储不发生重排序
mb()既提供了读屏障也提供了写屏障，载入和存储动作都不会跨越屏障重新排序。
read_barrier_depends()阻止跨越屏障的具有数据依赖关系的载入动作重新排序
smp_rmb()在SMP上提供rmb()功能，在UP上提供barrier()功能
smp_wmb()在SMP上提供wmb()功能，在UP上提供barrier()功能
smp_mb()在SMP上提供mb()功能，在UP上提供barrier()功能
barrier()阻止编译器跨屏障对载入或存储操作进行优化
